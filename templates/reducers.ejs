import { Action, AnyAction, Reducer } from "redux";
import * as SI from "seamless-immutable";
import { createAction, PayloadAction } from "typesafe-actions";
import { mapReducers, ReducerMap } from "../../Lib/ReduxHelpers";

/* ------------- Types and Action Creators ------------- */

export enum <%= pascalCase(props.name) %>ActionTypes {
  <%= snakeCase(props.name).toUpperCase() %>_REQUEST = "<%= pascalCase(props.name) %>Request",
  <%= snakeCase(props.name).toUpperCase() %>_SUCCESS = "<%= pascalCase(props.name) %>Success",
  <%= snakeCase(props.name).toUpperCase() %>_FAILURE = "<%= pascalCase(props.name) %>Failure",
}

interface <%= pascalCase(props.name) %>SuccessParams {status: boolean}

const actionCreators = {
  request: createAction(<%= pascalCase(props.name) %>ActionTypes.<%= snakeCase(props.name).toUpperCase() %>_REQUEST),
  success: createAction(<%= pascalCase(props.name) %>ActionTypes.<%= snakeCase(props.name).toUpperCase() %>_SUCCESS, 
    (payload: <%= pascalCase(props.name) %>SuccessParams)  =>
      ({
        type: <%= pascalCase(props.name) %>ActionTypes.<%= snakeCase(props.name).toUpperCase() %>_SUCCESS,
        payload
      })
  ),
  failure: createAction(<%= pascalCase(props.name) %>ActionTypes.<%= snakeCase(props.name).toUpperCase() %>_FAILURE),
});

export const <%= pascalCase(props.name) %>Actions = actionCreators;

export interface <%= pascalCase(props.name) %>State {
  data?: string | null;
  error?: boolean | null;
  fetching?: boolean | null;
}

export type <%= pascalCase(props.name) %>Action = <%= pascalCase(props.name) %>State & Action;

export type Immutable<%= pascalCase(props.name) %>State = SI.ImmutableObject<<%= pascalCase(props.name) %>State>;

/* ------------- Initial State ------------- */

export const INITIAL_STATE: Immutable<%= pascalCase(props.name) %>State = SI.from({
  data: null,
  error: null,
  fetching: null,
});

/* ------------- Reducers ------------- */

export const request: Reducer<Immutable<%= pascalCase(props.name) %>State> =
(state: Immutable<%= pascalCase(props.name) %>State, { data }: <%= pascalCase(props.name) %>Action) =>
  state.merge({ fetching: true, data, payload: null });

export const success: Reducer<Immutable<%= pascalCase(props.name) %>State> =
(state: Immutable<%= pascalCase(props.name) %>State, action: AnyAction & {payload?: <%= pascalCase(props.name) %>SuccessParams}) => {
  if (!action.payload) {
    return failure(state, action);
  }
  const data = action.payload.data;
  
  return state.merge({ fetching: false, error: null, data });
};

export const failure: Reducer<Immutable<%= pascalCase(props.name) %>State> = (state: Immutable<%= pascalCase(props.name) %>State) =>
  state.merge({ fetching: false, error: true, data: null });

/* ------------- Hookup Reducers To Types ------------- */

const reducerMap: ReducerMap<typeof actionCreators, Immutable<%= pascalCase(props.name) %>State> = {
  request,
  failure,
  success,
};

export const <%= pascalCase(props.name) %>Reducer = mapReducers(INITIAL_STATE, reducerMap, actionCreators);

export default <%= pascalCase(props.name) %>Reducer;
